// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Defines values for PlanUnit.
const (
	Count    PlanUnit = "count"
	Distance PlanUnit = "distance"
	Time     PlanUnit = "time"
)

// Defines values for StatisticGroupBy.
const (
	Day   StatisticGroupBy = "day"
	Month StatisticGroupBy = "month"
	Year  StatisticGroupBy = "year"
)

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Code    int    `json:"code"`
	Message string `json:"message"`
}

// Habit defines model for Habit.
type Habit struct {
	CurrentPlan   *Plan               `json:"currentPlan,omitempty"`
	Id            *int                `json:"id,omitempty"`
	Name          string              `json:"name"`
	Notifications *bool               `json:"notifications,omitempty"`
	StartDate     *openapi_types.Date `json:"startDate,omitempty"`

	// TodayValue today in sec
	TodayValue int `json:"todayValue"`
}

// HabitStatisticResponse defines model for HabitStatisticResponse.
type HabitStatisticResponse struct {
	GroupBy  StatisticGroupBy `json:"groupBy"`
	Period   []PeriodValue    `json:"period"`
	PlanUnit PlanUnit         `json:"planUnit"`
}

// HabitStatisticTotalResponse defines model for HabitStatisticTotalResponse.
type HabitStatisticTotalResponse struct {
	AveragePerDay *int      `json:"averagePerDay,omitempty"`
	PlanUnit      *PlanUnit `json:"planUnit,omitempty"`
	Total         *int      `json:"total,omitempty"`
}

// HabitUpdate defines model for HabitUpdate.
type HabitUpdate struct {
	Description   *string `json:"description,omitempty"`
	Name          *string `json:"name,omitempty"`
	Notifications *bool   `json:"notifications,omitempty"`
	Plan          *Plan   `json:"plan,omitempty"`
}

// LoginRequest defines model for LoginRequest.
type LoginRequest struct {
	Email    openapi_types.Email `json:"email"`
	Password string              `json:"password"`
}

// LoginResponse defines model for LoginResponse.
type LoginResponse struct {
	Token *string `json:"token,omitempty"`
}

// NewHabit defines model for NewHabit.
type NewHabit struct {
	Description   *string `json:"description,omitempty"`
	Name          string  `json:"name"`
	Notifications *bool   `json:"notifications,omitempty"`
	Plan          Plan    `json:"plan"`
}

// PeriodValue defines model for PeriodValue.
type PeriodValue struct {
	// Interval тут приходит в зависимости от типа, условно если мы выбрали день, то приходят дни недели, если месяц, то месяца, аналогично с годами
	Interval string `json:"interval"`

	// Value тут приходит значение в зависимости от типа
	Value int `json:"value"`
}

// Plan defines model for Plan.
type Plan struct {
	// Goal тут крч мы передаем значение в зависимости от плана, в минимальных единицах измерения, (метры, секунды, разы)
	Goal     *int      `json:"goal,omitempty"`
	PlanUnit *PlanUnit `json:"planUnit,omitempty"`
}

// PlanUnit defines model for PlanUnit.
type PlanUnit string

// RegisterRequest defines model for RegisterRequest.
type RegisterRequest struct {
	Age      *int                 `json:"age,omitempty"`
	Email    *openapi_types.Email `json:"email,omitempty"`
	Password *string              `json:"password,omitempty"`
	Username *string              `json:"username,omitempty"`
}

// ScoreHabit defines model for ScoreHabit.
type ScoreHabit struct {
	Date time.Time `json:"date"`

	// Value тут крч мы передаем значение в минимальных единицах измерения, (метры, секунды, разы)
	Value int `json:"value"`
}

// StatisticGroupBy defines model for StatisticGroupBy.
type StatisticGroupBy string

// UserProfile defines model for UserProfile.
type UserProfile struct {
	AvatarUrl   *string             `json:"avatarUrl,omitempty"`
	City        *string             `json:"city,omitempty"`
	Country     *string             `json:"country,omitempty"`
	DateOfBirth *openapi_types.Date `json:"dateOfBirth,omitempty"`
	Email       *string             `json:"email,omitempty"`
	Username    *string             `json:"username,omitempty"`
}

// UserProfileUpdate defines model for UserProfileUpdate.
type UserProfileUpdate struct {
	City        *string             `json:"city,omitempty"`
	Country     *string             `json:"country,omitempty"`
	DateOfBirth *openapi_types.Date `json:"dateOfBirth,omitempty"`
	Email       *string             `json:"email,omitempty"`
	Password    *string             `json:"password,omitempty"`
	Username    *string             `json:"username,omitempty"`
}

// GetApiHabitsHabitIdStatisticParams defines parameters for GetApiHabitsHabitIdStatistic.
type GetApiHabitsHabitIdStatisticParams struct {
	DateFrom openapi_types.Date `form:"date-from" json:"date-from"`
	DateTo   openapi_types.Date `form:"date-to" json:"date-to"`
	GroupBy  StatisticGroupBy   `form:"group-by" json:"group-by"`
}

// PostApiUsersAvatarMultipartBody defines parameters for PostApiUsersAvatar.
type PostApiUsersAvatarMultipartBody struct {
	File *openapi_types.File `json:"file,omitempty"`
}

// PostApiAuthLoginJSONRequestBody defines body for PostApiAuthLogin for application/json ContentType.
type PostApiAuthLoginJSONRequestBody = LoginRequest

// PostApiAuthRegisterJSONRequestBody defines body for PostApiAuthRegister for application/json ContentType.
type PostApiAuthRegisterJSONRequestBody = RegisterRequest

// PostApiHabitsJSONRequestBody defines body for PostApiHabits for application/json ContentType.
type PostApiHabitsJSONRequestBody = NewHabit

// PutApiHabitsHabitIdJSONRequestBody defines body for PutApiHabitsHabitId for application/json ContentType.
type PutApiHabitsHabitIdJSONRequestBody = HabitUpdate

// PostApiHabitsHabitIdScoreJSONRequestBody defines body for PostApiHabitsHabitIdScore for application/json ContentType.
type PostApiHabitsHabitIdScoreJSONRequestBody = ScoreHabit

// PostApiUsersAvatarMultipartRequestBody defines body for PostApiUsersAvatar for multipart/form-data ContentType.
type PostApiUsersAvatarMultipartRequestBody PostApiUsersAvatarMultipartBody

// PutApiUsersProfileJSONRequestBody defines body for PutApiUsersProfile for application/json ContentType.
type PutApiUsersProfileJSONRequestBody = UserProfileUpdate

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// PostApiAuthLoginWithBody request with any body
	PostApiAuthLoginWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiAuthLogin(ctx context.Context, body PostApiAuthLoginJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiAuthRegisterWithBody request with any body
	PostApiAuthRegisterWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiAuthRegister(ctx context.Context, body PostApiAuthRegisterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiHabits request
	GetApiHabits(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiHabitsWithBody request with any body
	PostApiHabitsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiHabits(ctx context.Context, body PostApiHabitsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiHabitsHabitId request
	GetApiHabitsHabitId(ctx context.Context, habitId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiHabitsHabitIdWithBody request with any body
	PutApiHabitsHabitIdWithBody(ctx context.Context, habitId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiHabitsHabitId(ctx context.Context, habitId int, body PutApiHabitsHabitIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiHabitsHabitIdScoreWithBody request with any body
	PostApiHabitsHabitIdScoreWithBody(ctx context.Context, habitId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiHabitsHabitIdScore(ctx context.Context, habitId int, body PostApiHabitsHabitIdScoreJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiHabitsHabitIdStatistic request
	GetApiHabitsHabitIdStatistic(ctx context.Context, habitId int, params *GetApiHabitsHabitIdStatisticParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiHabitsHabitIdStatisticTotal request
	GetApiHabitsHabitIdStatisticTotal(ctx context.Context, habitId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiUsersAvatar request
	GetApiUsersAvatar(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiUsersAvatarWithBody request with any body
	PostApiUsersAvatarWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiUsersProfile request
	GetApiUsersProfile(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiUsersProfileWithBody request with any body
	PutApiUsersProfileWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiUsersProfile(ctx context.Context, body PutApiUsersProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) PostApiAuthLoginWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiAuthLoginRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiAuthLogin(ctx context.Context, body PostApiAuthLoginJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiAuthLoginRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiAuthRegisterWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiAuthRegisterRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiAuthRegister(ctx context.Context, body PostApiAuthRegisterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiAuthRegisterRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiHabits(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiHabitsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiHabitsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiHabitsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiHabits(ctx context.Context, body PostApiHabitsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiHabitsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiHabitsHabitId(ctx context.Context, habitId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiHabitsHabitIdRequest(c.Server, habitId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiHabitsHabitIdWithBody(ctx context.Context, habitId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiHabitsHabitIdRequestWithBody(c.Server, habitId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiHabitsHabitId(ctx context.Context, habitId int, body PutApiHabitsHabitIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiHabitsHabitIdRequest(c.Server, habitId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiHabitsHabitIdScoreWithBody(ctx context.Context, habitId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiHabitsHabitIdScoreRequestWithBody(c.Server, habitId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiHabitsHabitIdScore(ctx context.Context, habitId int, body PostApiHabitsHabitIdScoreJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiHabitsHabitIdScoreRequest(c.Server, habitId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiHabitsHabitIdStatistic(ctx context.Context, habitId int, params *GetApiHabitsHabitIdStatisticParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiHabitsHabitIdStatisticRequest(c.Server, habitId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiHabitsHabitIdStatisticTotal(ctx context.Context, habitId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiHabitsHabitIdStatisticTotalRequest(c.Server, habitId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiUsersAvatar(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiUsersAvatarRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiUsersAvatarWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiUsersAvatarRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiUsersProfile(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiUsersProfileRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiUsersProfileWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiUsersProfileRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiUsersProfile(ctx context.Context, body PutApiUsersProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiUsersProfileRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewPostApiAuthLoginRequest calls the generic PostApiAuthLogin builder with application/json body
func NewPostApiAuthLoginRequest(server string, body PostApiAuthLoginJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiAuthLoginRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiAuthLoginRequestWithBody generates requests for PostApiAuthLogin with any type of body
func NewPostApiAuthLoginRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/auth/login")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiAuthRegisterRequest calls the generic PostApiAuthRegister builder with application/json body
func NewPostApiAuthRegisterRequest(server string, body PostApiAuthRegisterJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiAuthRegisterRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiAuthRegisterRequestWithBody generates requests for PostApiAuthRegister with any type of body
func NewPostApiAuthRegisterRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/auth/register")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiHabitsRequest generates requests for GetApiHabits
func NewGetApiHabitsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/habits")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiHabitsRequest calls the generic PostApiHabits builder with application/json body
func NewPostApiHabitsRequest(server string, body PostApiHabitsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiHabitsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiHabitsRequestWithBody generates requests for PostApiHabits with any type of body
func NewPostApiHabitsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/habits")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiHabitsHabitIdRequest generates requests for GetApiHabitsHabitId
func NewGetApiHabitsHabitIdRequest(server string, habitId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "habitId", runtime.ParamLocationPath, habitId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/habits/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiHabitsHabitIdRequest calls the generic PutApiHabitsHabitId builder with application/json body
func NewPutApiHabitsHabitIdRequest(server string, habitId int, body PutApiHabitsHabitIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiHabitsHabitIdRequestWithBody(server, habitId, "application/json", bodyReader)
}

// NewPutApiHabitsHabitIdRequestWithBody generates requests for PutApiHabitsHabitId with any type of body
func NewPutApiHabitsHabitIdRequestWithBody(server string, habitId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "habitId", runtime.ParamLocationPath, habitId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/habits/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiHabitsHabitIdScoreRequest calls the generic PostApiHabitsHabitIdScore builder with application/json body
func NewPostApiHabitsHabitIdScoreRequest(server string, habitId int, body PostApiHabitsHabitIdScoreJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiHabitsHabitIdScoreRequestWithBody(server, habitId, "application/json", bodyReader)
}

// NewPostApiHabitsHabitIdScoreRequestWithBody generates requests for PostApiHabitsHabitIdScore with any type of body
func NewPostApiHabitsHabitIdScoreRequestWithBody(server string, habitId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "habitId", runtime.ParamLocationPath, habitId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/habits/%s/score", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiHabitsHabitIdStatisticRequest generates requests for GetApiHabitsHabitIdStatistic
func NewGetApiHabitsHabitIdStatisticRequest(server string, habitId int, params *GetApiHabitsHabitIdStatisticParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "habitId", runtime.ParamLocationPath, habitId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/habits/%s/statistic", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "date-from", runtime.ParamLocationQuery, params.DateFrom); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "date-to", runtime.ParamLocationQuery, params.DateTo); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "group-by", runtime.ParamLocationQuery, params.GroupBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiHabitsHabitIdStatisticTotalRequest generates requests for GetApiHabitsHabitIdStatisticTotal
func NewGetApiHabitsHabitIdStatisticTotalRequest(server string, habitId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "habitId", runtime.ParamLocationPath, habitId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/habits/%s/statistic/total", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiUsersAvatarRequest generates requests for GetApiUsersAvatar
func NewGetApiUsersAvatarRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/users/avatar")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiUsersAvatarRequestWithBody generates requests for PostApiUsersAvatar with any type of body
func NewPostApiUsersAvatarRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/users/avatar")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiUsersProfileRequest generates requests for GetApiUsersProfile
func NewGetApiUsersProfileRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/users/profile")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiUsersProfileRequest calls the generic PutApiUsersProfile builder with application/json body
func NewPutApiUsersProfileRequest(server string, body PutApiUsersProfileJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiUsersProfileRequestWithBody(server, "application/json", bodyReader)
}

// NewPutApiUsersProfileRequestWithBody generates requests for PutApiUsersProfile with any type of body
func NewPutApiUsersProfileRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/users/profile")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// PostApiAuthLoginWithBodyWithResponse request with any body
	PostApiAuthLoginWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiAuthLoginResponse, error)

	PostApiAuthLoginWithResponse(ctx context.Context, body PostApiAuthLoginJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiAuthLoginResponse, error)

	// PostApiAuthRegisterWithBodyWithResponse request with any body
	PostApiAuthRegisterWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiAuthRegisterResponse, error)

	PostApiAuthRegisterWithResponse(ctx context.Context, body PostApiAuthRegisterJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiAuthRegisterResponse, error)

	// GetApiHabitsWithResponse request
	GetApiHabitsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiHabitsResponse, error)

	// PostApiHabitsWithBodyWithResponse request with any body
	PostApiHabitsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiHabitsResponse, error)

	PostApiHabitsWithResponse(ctx context.Context, body PostApiHabitsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiHabitsResponse, error)

	// GetApiHabitsHabitIdWithResponse request
	GetApiHabitsHabitIdWithResponse(ctx context.Context, habitId int, reqEditors ...RequestEditorFn) (*GetApiHabitsHabitIdResponse, error)

	// PutApiHabitsHabitIdWithBodyWithResponse request with any body
	PutApiHabitsHabitIdWithBodyWithResponse(ctx context.Context, habitId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiHabitsHabitIdResponse, error)

	PutApiHabitsHabitIdWithResponse(ctx context.Context, habitId int, body PutApiHabitsHabitIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiHabitsHabitIdResponse, error)

	// PostApiHabitsHabitIdScoreWithBodyWithResponse request with any body
	PostApiHabitsHabitIdScoreWithBodyWithResponse(ctx context.Context, habitId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiHabitsHabitIdScoreResponse, error)

	PostApiHabitsHabitIdScoreWithResponse(ctx context.Context, habitId int, body PostApiHabitsHabitIdScoreJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiHabitsHabitIdScoreResponse, error)

	// GetApiHabitsHabitIdStatisticWithResponse request
	GetApiHabitsHabitIdStatisticWithResponse(ctx context.Context, habitId int, params *GetApiHabitsHabitIdStatisticParams, reqEditors ...RequestEditorFn) (*GetApiHabitsHabitIdStatisticResponse, error)

	// GetApiHabitsHabitIdStatisticTotalWithResponse request
	GetApiHabitsHabitIdStatisticTotalWithResponse(ctx context.Context, habitId int, reqEditors ...RequestEditorFn) (*GetApiHabitsHabitIdStatisticTotalResponse, error)

	// GetApiUsersAvatarWithResponse request
	GetApiUsersAvatarWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiUsersAvatarResponse, error)

	// PostApiUsersAvatarWithBodyWithResponse request with any body
	PostApiUsersAvatarWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiUsersAvatarResponse, error)

	// GetApiUsersProfileWithResponse request
	GetApiUsersProfileWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiUsersProfileResponse, error)

	// PutApiUsersProfileWithBodyWithResponse request with any body
	PutApiUsersProfileWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiUsersProfileResponse, error)

	PutApiUsersProfileWithResponse(ctx context.Context, body PutApiUsersProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiUsersProfileResponse, error)
}

type PostApiAuthLoginResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LoginResponse
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostApiAuthLoginResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiAuthLoginResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiAuthRegisterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ErrorResponse
	JSON400      *ErrorResponse
	JSON409      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostApiAuthRegisterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiAuthRegisterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiHabitsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Habit
}

// Status returns HTTPResponse.Status
func (r GetApiHabitsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiHabitsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiHabitsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Habit
}

// Status returns HTTPResponse.Status
func (r PostApiHabitsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiHabitsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiHabitsHabitIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Habit
}

// Status returns HTTPResponse.Status
func (r GetApiHabitsHabitIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiHabitsHabitIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiHabitsHabitIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutApiHabitsHabitIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiHabitsHabitIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiHabitsHabitIdScoreResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiHabitsHabitIdScoreResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiHabitsHabitIdScoreResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiHabitsHabitIdStatisticResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HabitStatisticResponse
}

// Status returns HTTPResponse.Status
func (r GetApiHabitsHabitIdStatisticResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiHabitsHabitIdStatisticResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiHabitsHabitIdStatisticTotalResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HabitStatisticTotalResponse
}

// Status returns HTTPResponse.Status
func (r GetApiHabitsHabitIdStatisticTotalResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiHabitsHabitIdStatisticTotalResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiUsersAvatarResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiUsersAvatarResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiUsersAvatarResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiUsersAvatarResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiUsersAvatarResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiUsersAvatarResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiUsersProfileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserProfile
}

// Status returns HTTPResponse.Status
func (r GetApiUsersProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiUsersProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiUsersProfileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutApiUsersProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiUsersProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// PostApiAuthLoginWithBodyWithResponse request with arbitrary body returning *PostApiAuthLoginResponse
func (c *ClientWithResponses) PostApiAuthLoginWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiAuthLoginResponse, error) {
	rsp, err := c.PostApiAuthLoginWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiAuthLoginResponse(rsp)
}

func (c *ClientWithResponses) PostApiAuthLoginWithResponse(ctx context.Context, body PostApiAuthLoginJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiAuthLoginResponse, error) {
	rsp, err := c.PostApiAuthLogin(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiAuthLoginResponse(rsp)
}

// PostApiAuthRegisterWithBodyWithResponse request with arbitrary body returning *PostApiAuthRegisterResponse
func (c *ClientWithResponses) PostApiAuthRegisterWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiAuthRegisterResponse, error) {
	rsp, err := c.PostApiAuthRegisterWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiAuthRegisterResponse(rsp)
}

func (c *ClientWithResponses) PostApiAuthRegisterWithResponse(ctx context.Context, body PostApiAuthRegisterJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiAuthRegisterResponse, error) {
	rsp, err := c.PostApiAuthRegister(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiAuthRegisterResponse(rsp)
}

// GetApiHabitsWithResponse request returning *GetApiHabitsResponse
func (c *ClientWithResponses) GetApiHabitsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiHabitsResponse, error) {
	rsp, err := c.GetApiHabits(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiHabitsResponse(rsp)
}

// PostApiHabitsWithBodyWithResponse request with arbitrary body returning *PostApiHabitsResponse
func (c *ClientWithResponses) PostApiHabitsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiHabitsResponse, error) {
	rsp, err := c.PostApiHabitsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiHabitsResponse(rsp)
}

func (c *ClientWithResponses) PostApiHabitsWithResponse(ctx context.Context, body PostApiHabitsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiHabitsResponse, error) {
	rsp, err := c.PostApiHabits(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiHabitsResponse(rsp)
}

// GetApiHabitsHabitIdWithResponse request returning *GetApiHabitsHabitIdResponse
func (c *ClientWithResponses) GetApiHabitsHabitIdWithResponse(ctx context.Context, habitId int, reqEditors ...RequestEditorFn) (*GetApiHabitsHabitIdResponse, error) {
	rsp, err := c.GetApiHabitsHabitId(ctx, habitId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiHabitsHabitIdResponse(rsp)
}

// PutApiHabitsHabitIdWithBodyWithResponse request with arbitrary body returning *PutApiHabitsHabitIdResponse
func (c *ClientWithResponses) PutApiHabitsHabitIdWithBodyWithResponse(ctx context.Context, habitId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiHabitsHabitIdResponse, error) {
	rsp, err := c.PutApiHabitsHabitIdWithBody(ctx, habitId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiHabitsHabitIdResponse(rsp)
}

func (c *ClientWithResponses) PutApiHabitsHabitIdWithResponse(ctx context.Context, habitId int, body PutApiHabitsHabitIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiHabitsHabitIdResponse, error) {
	rsp, err := c.PutApiHabitsHabitId(ctx, habitId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiHabitsHabitIdResponse(rsp)
}

// PostApiHabitsHabitIdScoreWithBodyWithResponse request with arbitrary body returning *PostApiHabitsHabitIdScoreResponse
func (c *ClientWithResponses) PostApiHabitsHabitIdScoreWithBodyWithResponse(ctx context.Context, habitId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiHabitsHabitIdScoreResponse, error) {
	rsp, err := c.PostApiHabitsHabitIdScoreWithBody(ctx, habitId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiHabitsHabitIdScoreResponse(rsp)
}

func (c *ClientWithResponses) PostApiHabitsHabitIdScoreWithResponse(ctx context.Context, habitId int, body PostApiHabitsHabitIdScoreJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiHabitsHabitIdScoreResponse, error) {
	rsp, err := c.PostApiHabitsHabitIdScore(ctx, habitId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiHabitsHabitIdScoreResponse(rsp)
}

// GetApiHabitsHabitIdStatisticWithResponse request returning *GetApiHabitsHabitIdStatisticResponse
func (c *ClientWithResponses) GetApiHabitsHabitIdStatisticWithResponse(ctx context.Context, habitId int, params *GetApiHabitsHabitIdStatisticParams, reqEditors ...RequestEditorFn) (*GetApiHabitsHabitIdStatisticResponse, error) {
	rsp, err := c.GetApiHabitsHabitIdStatistic(ctx, habitId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiHabitsHabitIdStatisticResponse(rsp)
}

// GetApiHabitsHabitIdStatisticTotalWithResponse request returning *GetApiHabitsHabitIdStatisticTotalResponse
func (c *ClientWithResponses) GetApiHabitsHabitIdStatisticTotalWithResponse(ctx context.Context, habitId int, reqEditors ...RequestEditorFn) (*GetApiHabitsHabitIdStatisticTotalResponse, error) {
	rsp, err := c.GetApiHabitsHabitIdStatisticTotal(ctx, habitId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiHabitsHabitIdStatisticTotalResponse(rsp)
}

// GetApiUsersAvatarWithResponse request returning *GetApiUsersAvatarResponse
func (c *ClientWithResponses) GetApiUsersAvatarWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiUsersAvatarResponse, error) {
	rsp, err := c.GetApiUsersAvatar(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiUsersAvatarResponse(rsp)
}

// PostApiUsersAvatarWithBodyWithResponse request with arbitrary body returning *PostApiUsersAvatarResponse
func (c *ClientWithResponses) PostApiUsersAvatarWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiUsersAvatarResponse, error) {
	rsp, err := c.PostApiUsersAvatarWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiUsersAvatarResponse(rsp)
}

// GetApiUsersProfileWithResponse request returning *GetApiUsersProfileResponse
func (c *ClientWithResponses) GetApiUsersProfileWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiUsersProfileResponse, error) {
	rsp, err := c.GetApiUsersProfile(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiUsersProfileResponse(rsp)
}

// PutApiUsersProfileWithBodyWithResponse request with arbitrary body returning *PutApiUsersProfileResponse
func (c *ClientWithResponses) PutApiUsersProfileWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiUsersProfileResponse, error) {
	rsp, err := c.PutApiUsersProfileWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiUsersProfileResponse(rsp)
}

func (c *ClientWithResponses) PutApiUsersProfileWithResponse(ctx context.Context, body PutApiUsersProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiUsersProfileResponse, error) {
	rsp, err := c.PutApiUsersProfile(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiUsersProfileResponse(rsp)
}

// ParsePostApiAuthLoginResponse parses an HTTP response from a PostApiAuthLoginWithResponse call
func ParsePostApiAuthLoginResponse(rsp *http.Response) (*PostApiAuthLoginResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiAuthLoginResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LoginResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParsePostApiAuthRegisterResponse parses an HTTP response from a PostApiAuthRegisterWithResponse call
func ParsePostApiAuthRegisterResponse(rsp *http.Response) (*PostApiAuthRegisterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiAuthRegisterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseGetApiHabitsResponse parses an HTTP response from a GetApiHabitsWithResponse call
func ParseGetApiHabitsResponse(rsp *http.Response) (*GetApiHabitsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiHabitsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Habit
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiHabitsResponse parses an HTTP response from a PostApiHabitsWithResponse call
func ParsePostApiHabitsResponse(rsp *http.Response) (*PostApiHabitsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiHabitsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Habit
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetApiHabitsHabitIdResponse parses an HTTP response from a GetApiHabitsHabitIdWithResponse call
func ParseGetApiHabitsHabitIdResponse(rsp *http.Response) (*GetApiHabitsHabitIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiHabitsHabitIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Habit
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutApiHabitsHabitIdResponse parses an HTTP response from a PutApiHabitsHabitIdWithResponse call
func ParsePutApiHabitsHabitIdResponse(rsp *http.Response) (*PutApiHabitsHabitIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiHabitsHabitIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostApiHabitsHabitIdScoreResponse parses an HTTP response from a PostApiHabitsHabitIdScoreWithResponse call
func ParsePostApiHabitsHabitIdScoreResponse(rsp *http.Response) (*PostApiHabitsHabitIdScoreResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiHabitsHabitIdScoreResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiHabitsHabitIdStatisticResponse parses an HTTP response from a GetApiHabitsHabitIdStatisticWithResponse call
func ParseGetApiHabitsHabitIdStatisticResponse(rsp *http.Response) (*GetApiHabitsHabitIdStatisticResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiHabitsHabitIdStatisticResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HabitStatisticResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiHabitsHabitIdStatisticTotalResponse parses an HTTP response from a GetApiHabitsHabitIdStatisticTotalWithResponse call
func ParseGetApiHabitsHabitIdStatisticTotalResponse(rsp *http.Response) (*GetApiHabitsHabitIdStatisticTotalResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiHabitsHabitIdStatisticTotalResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HabitStatisticTotalResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiUsersAvatarResponse parses an HTTP response from a GetApiUsersAvatarWithResponse call
func ParseGetApiUsersAvatarResponse(rsp *http.Response) (*GetApiUsersAvatarResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiUsersAvatarResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostApiUsersAvatarResponse parses an HTTP response from a PostApiUsersAvatarWithResponse call
func ParsePostApiUsersAvatarResponse(rsp *http.Response) (*PostApiUsersAvatarResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiUsersAvatarResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiUsersProfileResponse parses an HTTP response from a GetApiUsersProfileWithResponse call
func ParseGetApiUsersProfileResponse(rsp *http.Response) (*GetApiUsersProfileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiUsersProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserProfile
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutApiUsersProfileResponse parses an HTTP response from a PutApiUsersProfileWithResponse call
func ParsePutApiUsersProfileResponse(rsp *http.Response) (*PutApiUsersProfileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiUsersProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Вход пользователя
	// (POST /api/auth/login)
	PostApiAuthLogin(ctx echo.Context) error
	// Регистрация нового пользователя
	// (POST /api/auth/register)
	PostApiAuthRegister(ctx echo.Context) error
	// Получить список хобби пользователя
	// (GET /api/habits)
	GetApiHabits(ctx echo.Context) error
	// Создать новое хобби
	// (POST /api/habits)
	PostApiHabits(ctx echo.Context) error
	// Получить детали хобби
	// (GET /api/habits/{habitId})
	GetApiHabitsHabitId(ctx echo.Context, habitId int) error
	// Обновить хобби
	// (PUT /api/habits/{habitId})
	PutApiHabitsHabitId(ctx echo.Context, habitId int) error
	// Записать время, потраченное на хобби
	// (POST /api/habits/{habitId}/score)
	PostApiHabitsHabitIdScore(ctx echo.Context, habitId int) error
	// Получение статустики
	// (GET /api/habits/{habitId}/statistic)
	GetApiHabitsHabitIdStatistic(ctx echo.Context, habitId int, params GetApiHabitsHabitIdStatisticParams) error
	// Получение статустики
	// (GET /api/habits/{habitId}/statistic/total)
	GetApiHabitsHabitIdStatisticTotal(ctx echo.Context, habitId int) error
	// Получить аватар пользователя
	// (GET /api/users/avatar)
	GetApiUsersAvatar(ctx echo.Context) error
	// Загрузить аватар
	// (POST /api/users/avatar)
	PostApiUsersAvatar(ctx echo.Context) error
	// Получить профиль пользователя
	// (GET /api/users/profile)
	GetApiUsersProfile(ctx echo.Context) error
	// Обновить профиль пользователя
	// (PUT /api/users/profile)
	PutApiUsersProfile(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostApiAuthLogin converts echo context to params.
func (w *ServerInterfaceWrapper) PostApiAuthLogin(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostApiAuthLogin(ctx)
	return err
}

// PostApiAuthRegister converts echo context to params.
func (w *ServerInterfaceWrapper) PostApiAuthRegister(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostApiAuthRegister(ctx)
	return err
}

// GetApiHabits converts echo context to params.
func (w *ServerInterfaceWrapper) GetApiHabits(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetApiHabits(ctx)
	return err
}

// PostApiHabits converts echo context to params.
func (w *ServerInterfaceWrapper) PostApiHabits(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostApiHabits(ctx)
	return err
}

// GetApiHabitsHabitId converts echo context to params.
func (w *ServerInterfaceWrapper) GetApiHabitsHabitId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "habitId" -------------
	var habitId int

	err = runtime.BindStyledParameterWithOptions("simple", "habitId", ctx.Param("habitId"), &habitId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter habitId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetApiHabitsHabitId(ctx, habitId)
	return err
}

// PutApiHabitsHabitId converts echo context to params.
func (w *ServerInterfaceWrapper) PutApiHabitsHabitId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "habitId" -------------
	var habitId int

	err = runtime.BindStyledParameterWithOptions("simple", "habitId", ctx.Param("habitId"), &habitId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter habitId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutApiHabitsHabitId(ctx, habitId)
	return err
}

// PostApiHabitsHabitIdScore converts echo context to params.
func (w *ServerInterfaceWrapper) PostApiHabitsHabitIdScore(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "habitId" -------------
	var habitId int

	err = runtime.BindStyledParameterWithOptions("simple", "habitId", ctx.Param("habitId"), &habitId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter habitId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostApiHabitsHabitIdScore(ctx, habitId)
	return err
}

// GetApiHabitsHabitIdStatistic converts echo context to params.
func (w *ServerInterfaceWrapper) GetApiHabitsHabitIdStatistic(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "habitId" -------------
	var habitId int

	err = runtime.BindStyledParameterWithOptions("simple", "habitId", ctx.Param("habitId"), &habitId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter habitId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApiHabitsHabitIdStatisticParams
	// ------------- Required query parameter "date-from" -------------

	err = runtime.BindQueryParameter("form", true, true, "date-from", ctx.QueryParams(), &params.DateFrom)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter date-from: %s", err))
	}

	// ------------- Required query parameter "date-to" -------------

	err = runtime.BindQueryParameter("form", true, true, "date-to", ctx.QueryParams(), &params.DateTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter date-to: %s", err))
	}

	// ------------- Required query parameter "group-by" -------------

	err = runtime.BindQueryParameter("form", true, true, "group-by", ctx.QueryParams(), &params.GroupBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter group-by: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetApiHabitsHabitIdStatistic(ctx, habitId, params)
	return err
}

// GetApiHabitsHabitIdStatisticTotal converts echo context to params.
func (w *ServerInterfaceWrapper) GetApiHabitsHabitIdStatisticTotal(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "habitId" -------------
	var habitId int

	err = runtime.BindStyledParameterWithOptions("simple", "habitId", ctx.Param("habitId"), &habitId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter habitId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetApiHabitsHabitIdStatisticTotal(ctx, habitId)
	return err
}

// GetApiUsersAvatar converts echo context to params.
func (w *ServerInterfaceWrapper) GetApiUsersAvatar(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetApiUsersAvatar(ctx)
	return err
}

// PostApiUsersAvatar converts echo context to params.
func (w *ServerInterfaceWrapper) PostApiUsersAvatar(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostApiUsersAvatar(ctx)
	return err
}

// GetApiUsersProfile converts echo context to params.
func (w *ServerInterfaceWrapper) GetApiUsersProfile(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetApiUsersProfile(ctx)
	return err
}

// PutApiUsersProfile converts echo context to params.
func (w *ServerInterfaceWrapper) PutApiUsersProfile(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutApiUsersProfile(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/api/auth/login", wrapper.PostApiAuthLogin)
	router.POST(baseURL+"/api/auth/register", wrapper.PostApiAuthRegister)
	router.GET(baseURL+"/api/habits", wrapper.GetApiHabits)
	router.POST(baseURL+"/api/habits", wrapper.PostApiHabits)
	router.GET(baseURL+"/api/habits/:habitId", wrapper.GetApiHabitsHabitId)
	router.PUT(baseURL+"/api/habits/:habitId", wrapper.PutApiHabitsHabitId)
	router.POST(baseURL+"/api/habits/:habitId/score", wrapper.PostApiHabitsHabitIdScore)
	router.GET(baseURL+"/api/habits/:habitId/statistic", wrapper.GetApiHabitsHabitIdStatistic)
	router.GET(baseURL+"/api/habits/:habitId/statistic/total", wrapper.GetApiHabitsHabitIdStatisticTotal)
	router.GET(baseURL+"/api/users/avatar", wrapper.GetApiUsersAvatar)
	router.POST(baseURL+"/api/users/avatar", wrapper.PostApiUsersAvatar)
	router.GET(baseURL+"/api/users/profile", wrapper.GetApiUsersProfile)
	router.PUT(baseURL+"/api/users/profile", wrapper.PutApiUsersProfile)

}
